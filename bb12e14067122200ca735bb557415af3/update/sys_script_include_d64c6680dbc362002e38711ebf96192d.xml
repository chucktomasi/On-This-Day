<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_otd.GoogleCalendar</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GoogleCalendar</name>
        <script><![CDATA[var GoogleCalendar = Class.create();
GoogleCalendar.prototype = {
    initialize: function(pageRec) {
        this.pageRec = pageRec;
        this.gdt = new GlideDateTime(this.pageRec.getValue('date'));
        this.year = this.gdt.getYearUTC();
        this.otd = this.pageRec.getValue('date');
        this.calendarID = gs.getProperty('sn_otd.google_calendar_id');
        // this.oauthProfile = gs.getProperty('sn_otd.google_oauth_profile');
    },

    _add1Day: function(date) {

        var gdt = new GlideDateTime(date);
        gdt.add(86400000);
        var newDate = gdt.getDate();

        return newDate.getValue();

    },

    publish: function() {

        try {
            var inputs = {};
            inputs['calendar_id'] = this.calendarID; // String 
            inputs['summary'] = "On This Day (" + this.year + ")"; // String (Full UTF-8) 
            inputs['description'] = this.pageRec.getValue('output'); // String (Full UTF-8) 
            inputs['all_day'] = true; // True/False 
			var startGdt = new GlideDateTime(this.otd);
            inputs['start_time'] = startGdt; // Date/Time 
            inputs['end_time'] = ""; // Date/Time 
            inputs['time_zone'] = ""; // Dynamic Choice 
            inputs['location'] = ""; // String (Full UTF-8) 
            // inputs['color'] = 3; // Choice 
            inputs['recurrence'] = {
                "RRULE": "FREQ=YEARLY",
                "RDATE": "",
                "EXDATE": ""
            }; // Object 
            inputs['create_hangout_meet'] = false; // True/False 
            inputs['attendees'] = [{
                "displayName": "",
                "email": "",
                "resource": false
            }]; // inputs['visibility'] = ; // Choice 
            // inputs['transparency'] = ; // String 

            // Execute Synchronously: Run in foreground. Code snippet has access to outputs.
            var result = sn_fd.FlowAPI.getRunner()
                .action('sn_gcalendar_spoke.create_event_on_calendar')
                .inForeground()
                .withInputs(inputs)
                .run();
            var outputs = result.getOutputs();

            // Get Outputs:
            // Note: outputs can only be retrieved when executing synchronously.
            var status = outputs['status']; // Choice
            var error_message = outputs['error_message']; // String
            var event = outputs['event']; // Object

        } catch (ex) {
            var message = ex.getMessage();
            gs.error(message);
        }

    },

    type: 'GoogleCalendar'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-11-08 01:39:10</sys_created_on>
        <sys_id>d64c6680dbc362002e38711ebf96192d</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>GoogleCalendar</sys_name>
        <sys_package display_value="On This Day" source="sn_otd">bb12e14067122200ca735bb557415af3</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="On This Day">bb12e14067122200ca735bb557415af3</sys_scope>
        <sys_update_name>sys_script_include_d64c6680dbc362002e38711ebf96192d</sys_update_name>
        <sys_updated_by>chuck.tomasi@gmail.com</sys_updated_by>
        <sys_updated_on>2024-07-08 13:57:38</sys_updated_on>
    </sys_script_include>
</record_update>
