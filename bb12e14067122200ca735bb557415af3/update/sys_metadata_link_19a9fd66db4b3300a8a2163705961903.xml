<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>ed41dff6db8dfb00f6d0a422ca9619ac</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="x_snc_cls_idea"&gt;
    &lt;x_snc_cls_idea action="INSERT_OR_UPDATE"&gt;
        &lt;active&gt;false&lt;/active&gt;
        &lt;description&gt;I wanted to ensure Health Club checkins happened at least once at each station and duplicates at a station were ignored (e.g. count unique)&lt;/description&gt;
        &lt;episode display_value="NOWCommunity Live Stream - 2019-04-30"&gt;e7fe277edbcdfb00f6d0a422ca9619f5&lt;/episode&gt;
        &lt;name&gt;Counting Unique Records&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[/*
hasFinishedAllStations : function(workoutGr) {

		var numberOfStations = parseInt(gs.getProperty('x_snc_health_club.stations'), 10);
		var finishedStations = this._getFinishedStations(workoutGr);

		gs.info('hasFinishedAllStations(): ' + JSON.stringify(finishedStations, null, 4));
		if (this._objectSize(finishedStations) == numberOfStations) {
			return true;
		}

		return false;

	},

	_getFinishedStations : function(thisWorkoutGr) {
		
		var stationList = {};
		var contactType = thisWorkoutGr.contact.x_snc_health_club_workout_type.toString();
		var contactDifficulty = thisWorkoutGr.contact.x_snc_health_club_workout_difficulty.toString();
		var contactID = thisWorkoutGr.contact.toString();
		gs.info('contactType=' + contactType + ' difficulty=' + contactDifficulty);

		var workoutGr = new GlideRecord(CONTACT_WORKOUT_M2M);
		workoutGr.addQuery('contact', contactID);
		workoutGr.addQuery('workout.type', contactType);
		workoutGr.addQuery('workout.difficulty', contactDifficulty);
		workoutGr.addQuery('state', 'finished');
		workoutGr.query();

		while (workoutGr.next()) {
			var stationID = workoutGr.getValue('station');
			stationList[stationID] = workoutGr.station.getDisplayValue();
		}

		return stationList;
	},

	_objectSize : function(obj) {
		var size = 0, key;
		for (key in obj) {
			if (obj.hasOwnProperty(key))
				size++;
		}
		return size;
	},
*/]]&gt;&lt;/script&gt;
        &lt;sys_created_by&gt;chuck.tomasi&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-04-30 12:09:42&lt;/sys_created_on&gt;
        &lt;sys_id&gt;ed41dff6db8dfb00f6d0a422ca9619ac&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;chuck.tomasi&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-04-30 14:20:50&lt;/sys_updated_on&gt;
    &lt;/x_snc_cls_idea&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>chuck.tomasi</sys_created_by>
        <sys_created_on>2019-08-06 21:11:57</sys_created_on>
        <sys_id>19a9fd66db4b3300a8a2163705961903</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Counting Unique Records</sys_name>
        <sys_package display_value="On This Day" source="sn_otd">bb12e14067122200ca735bb557415af3</sys_package>
        <sys_policy/>
        <sys_scope display_value="On This Day">bb12e14067122200ca735bb557415af3</sys_scope>
        <sys_update_name>sys_metadata_link_19a9fd66db4b3300a8a2163705961903</sys_update_name>
        <sys_updated_by>chuck.tomasi</sys_updated_by>
        <sys_updated_on>2019-08-06 21:11:57</sys_updated_on>
        <tablename>x_snc_cls_idea</tablename>
    </sys_metadata_link>
</record_update>
